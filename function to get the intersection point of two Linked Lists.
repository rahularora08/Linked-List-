	int length(node *head)
	{
		node *current=head;
		int count=0;
		while(current!=NULL)
		{
			count++;
			current=current->next;
		}
		return count;
			}		
	int get_intersection_node(node *head1,node *head2)
	{   
		int l1=length(head1);
		int l2=length(head2);
		int d=abs(l1-l2);
		(l1>l2) ? func(d,head1,head2): func(d,head2,head1);
			}		
	int func(int d,node *head1,node *head2)
	{
		int i;
   node* current1 = head1;
   node* current2 = head2;
 
  for(i = 0; i < d; i++)
  {
    if(current1 == NULL)
    {  return -1; }
    current1 = current1->next;
  }
 
  while(current1 !=  NULL && current2 != NULL)
  {
    if(current1 == current2)
      return current1->data;
    current1= current1->next;
    current2= current2->next;
  }
 
  return -1;
			}
