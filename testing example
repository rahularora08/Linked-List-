#include <iostream>
using namespace std;
struct node
{
    int data;
    node *next;
};
class linked_list
{
private:
    node *head,*tail;
public:
    linked_list()
    {
        head = NULL;
        tail = NULL;
    }
    void add_node_at_end(int n)
    {
    	node *temp=new node;
    	temp->data=n;
    	temp->next=NULL;
    	if(head==NULL)
    	{
    		head=temp;
    		tail=temp;
		}
		else
		{
			tail->next=temp;
			tail=tail->next;
		}
    	
	}
	void add_node_at_start(int n)
	{
		node *temp=new node;
		temp->data=n;
		temp->next=head;
		head=temp;
	}
	void insert_at_position(int pos,int val)
	{
		node *pre=new node;
		node *cur=new node;
		node *temp=new node;
		cur=head;
		for(int i=1;i<pos;i++)
		{
			pre=cur;
			cur=cur->next;
		}
		temp->data=val;
		temp->next=cur;
		pre->next=temp;
	}
	void display()
	{
		node *temp=new node;
		temp=head;
		while(temp!=NULL)
		{
			cout<<temp->data<<"\t";
			temp=temp->next;
		}
	}
	void delete_start()
	{
		node *temp=new node;
		temp=head;
		head=head->next;
		delete temp;
		
	}
	void delete_last()
	{
		node *pre=new node;
		node *cur=new node;
		cur=head;
		while(cur->next!=NULL)
		{
			pre=cur;
			cur=cur->next;
		}
		tail=pre;
		pre->next=NULL;
		delete cur;
	}
	void delete_position(int pos)
  {
    node *current=new node;
    node *previous=new node;
    current=head;
    for(int i=1;i<pos;i++)
    {
      previous=current;
      current=current->next;
    }
    previous->next=current->next;
  }
  int count()
  {
  	node *temp=new node;
  	int len=0;
  	temp=head;
  	while(temp!=NULL)
  	{
  		len++;
  		temp=temp->next;
  		
	  }
	  return len;
  }
  bool find(int x)
  {
  	node *temp=new node;
  	temp=head;
  	while(temp!=NULL)
  	{
  		if(temp->data==x)
  		{
  			return true;
		  }
		temp=temp->next;  
	  }
	return false;  
  }
  void swap_nodes(int x,int y)
  { 
  if(x==y)
  return;
  node *prevX=new node;
  node *curX=new node;
  prevX=NULL;
  curX=head;
  while(curX && curX->data!=x)
  {
  	prevX=curX;
  	curX=curX->next;
  }
  node *prevY=new node;
  node *curY=new node;
  prevY=NULL;
  curY=head;
  while(curY && curY->data!=y)
  {
  	prevY=curY;
  	curY=curY->next;
  }
  if (curX == NULL || curY == NULL)
  return;
  if(prevX!=NULL)
  {
  	prevX->next=curY;
  	
  }
  else
  head=curY;
  if(prevY!=NULL)
  prevY->next=curX;
  else
  head=curX;
  node *temp=new node;
  temp=curY->next;
  curY->next=curX->next;
  curX->next=temp;
  }
  int get_nth(int index)
  {
  	node *current =new node;
  	current=head;
  	int count=0;
  	while(current!=NULL)
  	{
  		if(count==index)
  			return current->data;
  		count++;
		current=current->next;  	
		  
	}
  }
  int get_middle()
  {
  	node *slow=new node;
  	node *fast=new node;
  	slow=head;
  	fast=head;
  	while(fast!=NULL && fast->next!=NULL)
  	{
  		fast=fast->next->next;
  		slow=slow->next;
	  }
	return slow->data;  
  }
  void reverse()
  {
  	node *prev,*curr,*next=new node;
  	prev=NULL;
  	curr=head;
  	while(curr!=NULL)
  	{
  		next=curr->next;
  		curr->next=prev;
  		prev=curr;
  		curr=next;
	  }
	head=prev;  
  }
};

int main()
{

    linked_list a;
    a.add_node_at_end(3);
    a.add_node_at_end(5);
    a.add_node_at_start(4);
    a.insert_at_position(2,6);
    a.display();
    cout<<"\n";
    a.delete_start();
    a.display();
    cout<<"\n";
    a.delete_last();
    a.display();
    cout<<"\n";
    int x=a.count();
    cout<<x<<endl;
    a.find(6)? cout<<"Yes" :cout<<"No";
    a.swap_nodes(6,3);
    a.display();
    cout<<"\n";
    int y=a.get_nth(1);
    cout<<y<<endl;
    a.add_node_at_end(5);
    a.add_node_at_end(7);
    a.add_node_at_end(13);
    a.add_node_at_end(32);
    a.add_node_at_end(31);
    a.add_node_at_end(35);
    //a.add_node_at_end(54);
    a.display();
    cout<<"\n";
    int m=a.get_middle();
    cout<<m<<endl;
    a.reverse();
	a.display();
    return 0;
}
